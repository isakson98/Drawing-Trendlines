
Goals:
- have a "recipe" that will run on the available data efficiently
- ability to select/add/remove these things independently for each "recipe":  
    1. stock universe and their criteria
    2. trendline types and their criteria (try to capture all types of trendlines that work)
    3. entries and exits for a trading idea
    4. trendline statistics 
- ability to visualize the results for demonstration and verification purposes
- ability to back test results and see them in real time
----------------------------------------------------------------------

PROJECT COMPONENTS:

-> DATA 
features / ideas:
--> use stock price data
--> feature / precomputed data from price or volume
--> data should be easily updateable 
----> on a daily basis
----> trendlines' labels (whether they worked or not) should be updateable based on entry and on exit spefications
q:
--> What medium do I use to store data? (csv, hdf5, relational db, etc.)
--> how do I store feature data like high and low that depend on parameters themselves? 
---> should I store these features under columns that specify which parameters are used?
--> how do I choose the parameters for highs / lows and linear regression quality to capture all possible versions of successful trendlines
raw data where I got a trendline from should be easily accessible to add features for the neural network




-> STOCK SELECTION (search for trendline for these types of stocks and during this specific range)
features / ideas:
--> get as many stocks as possible for the longest range (address issues of ticker change and old stocks)
--> apply filters for selection (ability to have these as stand alone and editable)
---> market cap, average volume, adr filters, rise in the past year/quarter/month
q:
--> do I want to select a stock only for a period of time or its entire history?
--> how do I deal with stocks that may "shake me out" of criteria for small period of time and resume the trend




-> FEATURE ENGINEERING (use these types of trendlines and gather these types of statistics about them, impartial to the outcome)
features / ideas:
--> implementing linear regression for trendlines 
--> obtaining trendlines using various hyperparameters (ex. length of trendline, number of lower highs, etc)
--> calculating statistics of those trendlines (ex. % of decline of trendline / % of rise since previous low, etc)
--> tracking whether a breakout is successful or not (depends on entry / exit rules)
--> neural network training (train vs cross-val vs test data)
q:
--> how do I perfect linear regression trendline drawing (not just as highs and lows)
--> Do I want to accomodate only daily breakouts or on other timeframes as well (bigger as well as smaller ones)
--> how do I start tracking trendlines (above 50 daily ema or something like that)
--> how do I backtest in such way that I isolate features and labels in a way that does not interfere with backtesting
--> should i have a trendline per row, with all computed data about it 




-> BACK TESTING (given specific stocks and given trendlines found and given specific optimized values for trendline evaluation, what is the performance)
features / ideas:
--> make sure to distinguish test data vs training data
--> specifying entries (initial and adds) and exits (stoplosses, targets, trailing stops)
q: 
- Do i want something developed in-house or utilized well-writtern libraries like zipline or backtext
-- Can I code the outcome of a neural network into the backtest libraries 




essential workflow in real time ->
--> identify a trendline using linear regression
--> compute certain statistics of the trendline (as well as potentially stock fundumentals)
--> send those features into a neural network that will compute the probability of this trendline to work or not
--> decide on a threshold that you want
--> enter a position if trendline passes threshold

Things to keep in mind while designing / coding the project:
- what if I decide to add other setups and use different features for neural network
- what if I decide to find setups on 4hr or weekly chart?

--------------------------------------------------------------------------------------------


CURRENT TASKS:
- expand to cover longer length trendlines without hardcoding
- refactor trendlines function to cover ascending and descending lines
- make the trendline class to cover all 
- find a way to backtest these trendlines (after being to find)
- find a way to precompute high/lows 

LATER ON TASKS:
- feed in the data of linear regression made trendlines into 
- neural networks to determine best ones + other parameters 
-> best ones? --> the ones that have the best R/R as a result of the breakout

Drawing trendlines:
Trendline : line across which the general extrema price points align in a consolidation
-> identify starting point
--> local highs
-> identify end points 
--> current high above trendline of the same day
--> current high above trendline's upper sd of the same day
--> current high above the last high in the consolidation
-> quirks
--> capability to omit an outlier candle / series of candles 

FEATURES for neural network:
-> spy conditions
-> duration of the trendline
-> if I have both descending and ascending trendlines:
-> range between starts of trendlines vs range between end of trendline + duration of it
-> slope of descending trendline vs slope of ascending trendline
-> start of trendline with relation to the previous low
--> these comparisons will have to be in proportions and adjusted for varying ADR